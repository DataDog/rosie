package io.codiga.e2e;

import io.codiga.analyzer.Analyzer;
import io.codiga.analyzer.config.AnalyzerConfiguration;
import io.codiga.analyzer.rule.AnalyzerRule;
import io.codiga.cli.errorreporting.ErrorReportingDummy;
import io.codiga.cli.metrics.MetricsDummy;
import io.codiga.model.Language;
import io.codiga.model.error.AnalysisResult;
import io.codiga.model.error.Violation;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.Base64;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.logging.Logger;
import java.util.stream.Collectors;

import static io.codiga.cli.RulesUtils.getRulesFromFile;
import static org.junit.jupiter.api.Assertions.assertEquals;


public class LargeFileExecutionTest {

    public static String DB_PY = "";
    public static String ANALYSIS_PY = "";

    public static Map<String, String> FILES_TO_ANALYZE = Map.of(
        "db.py", DB_PY,
        "analysis.py", ANALYSIS_PY
    );

    public static Map<String, Integer> FILES_TO_VIOLATIONS = Map.of(
        "db.py", 21,
        "analysis.py", 27
    );


    ClassLoader classLoader = getClass().getClassLoader();
    private Logger log = Logger.getLogger("Test");

    @BeforeAll
    public static void init() {
    }

    @AfterAll
    public static void done() {

    }

    @Test
    @DisplayName("Execute rules on large files")
    public void testLargeFiles() throws IOException {
        long startMs = System.currentTimeMillis();


        try {
            List<AnalyzerRule> rules = getRulesFromFile("src/test/resources/rules.json");
            AnalyzerConfiguration configuration = new AnalyzerConfiguration(10000);

            Analyzer analyzer = new Analyzer(new ErrorReportingDummy(), new MetricsDummy(), configuration);

            FILES_TO_ANALYZE.forEach((fileName, fileContent) -> {
                try {
                    String decoded = new String(Base64.getDecoder().decode(fileContent.getBytes()));

                    AnalysisResult analysisResult = analyzer.analyze(Language.PYTHON, fileName, decoded, rules, false).get();
                    List<String> errors = analysisResult.ruleResults().stream().flatMap(r -> r.errors().stream()).collect(Collectors.toList());
                    List<Violation> violations = analysisResult.ruleResults().stream().flatMap(r -> r.violations().stream()).collect(Collectors.toList());
                    assertEquals(0, errors.size());
//                    assertEquals(FILES_TO_VIOLATIONS.get(fileName), violations.size());

                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                } catch (ExecutionException e) {
                    throw new RuntimeException(e);
                }
            });
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        long endMs = System.currentTimeMillis();
        long duration = endMs - startMs;
        log.info(String.format("time to complete: %s ms", duration));

    }

}

package io.codiga.analyzer.ast.languages.python;

import io.codiga.parser.python.gen.PythonLexer;
import io.codiga.parser.python.gen.PythonParser;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.Base64;
import java.util.logging.Logger;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class CodigaVisitorTest extends PythonTestUtils {

    private Logger log = Logger.getLogger("Test");

    @BeforeAll
    public static void init() {
    }

    @AfterAll
    public static void done() {

    }

    @Test
    @DisplayName("Parse long file")
    public void testLongFile() {
        String encodedCode = "";
        String decoded = new String(Base64.getDecoder().decode(encodedCode.getBytes()));
        PythonLexer lexer = new PythonLexer(CharStreams.fromString(decoded));
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        PythonParser parser = new PythonParser(tokens);
        parser.setBuildParseTree(true);
        CodigaVisitor codigaVisitor = new CodigaVisitor(decoded);
        codigaVisitor.visit(parser.root());
        assertEquals(64, codigaVisitor.assignments.size());
        assertEquals(22, codigaVisitor.fromStatements.size());
        assertEquals(32, codigaVisitor.importStatements.size());
        assertEquals(43, codigaVisitor.ifStatements.size());
        assertEquals(5, codigaVisitor.tryStatements.size());
        assertEquals(8, codigaVisitor.forStatements.size());
        assertEquals(13, codigaVisitor.functionDefinitions.size());
        assertEquals(225, codigaVisitor.functionCalls.size());
    }
}

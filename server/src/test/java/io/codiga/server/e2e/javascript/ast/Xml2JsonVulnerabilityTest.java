package io.codiga.server.e2e.javascript.ast;

import static org.junit.jupiter.api.Assertions.assertEquals;

import io.codiga.model.EntityChecked;
import io.codiga.model.Language;
import io.codiga.model.RuleType;
import io.codiga.server.e2e.E2EBase;
import io.codiga.server.response.Response;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Xml2JsonVulnerabilityTest extends E2EBase {

    private static final Logger logger = LoggerFactory.getLogger(Xml2JsonVulnerabilityTest.class);


    String code = """
        function test1(body) {
            const xml2json = require('xml2json')
            const result = xml2json.toJson(body, { object: true, arrayNotation: true })
            return result
        }""";


    String ruleCode = """
        function isModuleImported(node, variableName, moduleName) {
            const n = node.context.assignments.filter(a => a.left && a.left.astType === "string" && a.left.value === variableName);
            if(n && n.length > 0 ){
                const call = n[0].right;
                if(call.astType === "functioncall" && call.arguments && call.arguments.values && call.arguments.values.length > 0) {
                    const arg = call.arguments.values[0].value;

                    if(arg.astType === "string" && (arg.value === `"${moduleName}"` || arg.value === `'${moduleName}'`)) {
                        return true;
                    }
                }
                

            }
            return false;
        }
                        
                        
        function visit(node) {  
            const functionName = node.functionName;

            if(functionName && functionName.astType === "member" && functionName.name.value === "toJson"){
                if(functionName.parent && functionName.parent.astType === "string") {
                    const parentName = functionName.parent.value;

                    const isUsingModule = isModuleImported(node, parentName, "xml2json");
                    if(isUsingModule) {
                        const error = buildError(node.functionName.start.line, node.functionName.start.col, node.functionName.end.line, node.functionName.end.col, "unsafe deserialization", "CRITICAL", "SAFETY");
                        addError(error);
                    }
                }
                

                      
            }
        }
        """;

    @Test
    @DisplayName("change call to bar into call to baz")
    public void testFunctionCallRule() throws Exception {
    Response response =
        executeTest(
            "bla.js",
            code,
            Language.JAVASCRIPT,
            ruleCode,
            "replace-bar-baz",
            RuleType.AST_CHECK,
            EntityChecked.FUNCTION_CALL,
            null,
            true);
        logger.info(response.toString());
        assertEquals(1, response.ruleResponses.size());
        assertEquals(1, response.ruleResponses.get(0).violations.size());
        assertEquals(3, response.ruleResponses.get(0).violations.get(0).start.line);
        assertEquals(20, response.ruleResponses.get(0).violations.get(0).start.col);
        assertEquals(3, response.ruleResponses.get(0).violations.get(0).end.line);
        assertEquals(35, response.ruleResponses.get(0).violations.get(0).end.col);

//        assertEquals(fixedCode, applyFix(code, response.ruleResponses.get(0).violations.get(0).fixes.get(0)));
    }


}
